<h1>Week 15-Tetris</h1>
<!-- 導入 Brython 的程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){brython();}
</script>
<p>test</p>
<script type="text/python3">
print("可執行 Brython")

# 這個程式用於 demo 綠色方塊沿著特定網格路徑行走
# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc
from browser import document as doc
# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中
from browser import html
# 用於定時執行特定函式
import browser.timer
# 導入亂數模組
from random import random, randint

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 600)
# 將 canvas 標註的 id 設為 "canvas"
canvas.id = "canvas"
# 將 document 中 id 為 "brython_div" 的標註 
# 設為與 brython_div 變數對應
brython_div = doc["brython_div"]
# 將 canvas 標註放入 brython_div 所在位置
# 頁面中原本就已經放入 <div id="brython_div"></div> 標註
brython_div <= canvas
# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應
canvas = doc["canvas"]
# 將 canvas 的 2d 繪圖 context 命名為 ctx
ctx = canvas.getContext("2d")

# from https://levelup.gitconnected.com/writing-tetris-in-python-2a16bddb5318
# 暫時關閉 system proxy 設定後,  pip install pygame
#import pygame
# 將 pygame 動畫繪圖轉為 Brython
'''
為能在 script src 中導入, 必須將 .py 程式內容透過 cp-to-txt 複製到 .txt
'''
# 導入 random 模組
import random
# 以下為 Brython 新增
from browser import document as doc
from browser import html
import browser.timer

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 400, height = 500, id="canvas")
brython_div = doc["brython_div"]
brython_div <= canvas
ctx = canvas.getContext("2d")

# 定義顏色值數列
colors = [
    (0, 0, 0),
    (120, 37, 179),
    (100, 179, 179),
    (80, 34, 22),
    (80, 134, 22),
    (180, 34, 22),
    (180, 34, 122),
]
class Figure:
    # 定義圖形 (Figure) 類別
    x = 0
    y = 0

    figures = [
        [[1, 5, 9, 13], [4, 5, 6, 7]],
        [[4, 5, 9, 10], [2, 6, 5, 9]],
        [[6, 7, 9, 10], [1, 5, 6, 10]],
        [[1, 2, 5, 9], [0, 4, 5, 6], [1, 5, 9, 8], [4, 5, 6, 10]],
        [[1, 2, 6, 10], [5, 6, 7, 9], [2, 6, 10, 11], [3, 5, 6, 7]],
        [[1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9], [1, 5, 6, 9]],
        [[1, 2, 5, 6]],
    ]

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.type = random.randint(0, len(self.figures) - 1)
        self.color = random.randint(1, len(colors) - 1)
        self.rotation = 0

    def image(self):
        return self.figures[self.type][self.rotation]

    def rotate(self):
        self.rotation = (self.rotation + 1) % len(self.figures[self.type])


class Tetris:
    level = 2
    score = 0
    state = "start"
    field = []
    height = 0
    width = 0
    x = 100
    y = 60
    zoom = 20
    figure = None

    def __init__(self, height, width):
        self.height = height
        self.width = width
        self.field = []
        self.score = 0
        self.state = "start"
        for i in range(height):
            new_line = []
            for j in range(width):
                # 起始時每一個都填入 0
                new_line.append(0)
            self.field.append(new_line)

    def new_figure(self):
        self.figure = Figure(3, 0)

    def intersects(self):
        intersection = False
        for i in range(4):
            for j in range(4):
                if i * 4 + j in self.figure.image():
                    # block 到達底部, 左右兩邊界, 或該座標有其他 block
                    if i + self.figure.y > self.height - 1 or \
                            j + self.figure.x > self.width - 1 or \
                            j + self.figure.x < 0 or \
                            self.field[i + self.figure.y][j + self.figure.x] > 0:
                        intersection = True
        return intersection

    def break_lines(self):
        lines = 0
        for i in range(1, self.height):
            zeros = 0
            for j in range(self.width):
                if self.field[i][j] == 0:
                    zeros += 1
            if zeros == 0:
                lines += 1
                for i1 in range(i, 1, -1):
                    for j in range(self.width):
                        self.field[i1][j] = self.field[i1 - 1][j]
        self.score += lines ** 2

    def go_space(self):
        while not self.intersects():
            self.figure.y += 1
        self.figure.y -= 1
        self.freeze()

    def go_down(self):
        self.figure.y += 1
        if self.intersects():
            self.figure.y -= 1
            self.freeze()

    def freeze(self):
        for i in range(4):
            for j in range(4):
                if i * 4 + j in self.figure.image():
                    self.field[i + self.figure.y][j + self.figure.x] = self.figure.color
        self.break_lines()
        self.new_figure()
        if self.intersects():
            self.state = "gameover"

    def go_side(self, dx):
        old_x = self.figure.x
        self.figure.x += dx
        if self.intersects():
            self.figure.x = old_x

    def rotate(self):
        old_rotation = self.figure.rotation
        self.figure.rotate()
        if self.intersects():
            self.figure.rotation = old_rotation

# Define some colors
# from https://stackoverflow.com/questions/3380726/converting-a-rgb-color-tuple-to-a-six-digit-code
BLACK = '#%02x%02x%02x' % (0, 0, 0)
WHITE = '#%02x%02x%02x' % (255, 255, 255)
GRAY = '#%02x%02x%02x' % (128, 128, 128)

done = False
fps = 25
game = Tetris(20, 10)
counter = 0

pressing_down = False

def key_down(eve):
    key = eve.keyCode
    #if event.type == pygame.QUIT:
    # 32 is pause
    if key == 32:
        done = True
    # 82 is r key to rotate
    if key == 82:
        game.rotate()
    # 40 is down key
    if key == 40:
        pressing_down = True
    # 37 is left key
    if key == 37:
        game.go_side(-1)
    # 39 is right key
    if key == 39:
        game.go_side(1)
    # 68 is d key to move block to bottom
    if key == 68:
        game.go_space()
    # 27 is escape
    # reset the game
    if key == 27:
        game.__init__(20, 10)

def key_up(eve):
    key = eve.keyCode
    # 40 is down key
    if key == 40:
        pressing_down = False

#while not done:
def do_game():
    global counter
    if game.figure is None:
        game.new_figure()
    counter += 1
    if counter > 100000:
        counter = 0
    if counter % (fps // game.level // 2) == 0 or pressing_down:
        if game.state == "start":
            game.go_down()
    
    for i in range(game.height):
        for j in range(game.width):
            ctx.fillStyle = WHITE
            #ctx.scale(game.zoom, game.zoom)
            ctx.fillRect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)
            if game.field[i][j] > 0:
                ctx.fillStyle = '#%02x%02x%02x' % colors[game.field[i][j]]
                ctx.fillRect(game.x + game.zoom * j + 1, game.y + game.zoom * i + 1, game.zoom - 2, game.zoom - 1)
            ctx.lineWidth = 1
            ctx.strokeStyle = GRAY
            ctx.beginPath()
            ctx.rect(game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom)
            ctx.stroke()
    if game.figure is not None:
        for i in range(4):
            for j in range(4):
                p = i * 4 + j
                if p in game.figure.image():
                    ctx.fillStyle = '#%02x%02x%02x' % colors[game.figure.color]
                    ctx.fillRect(game.x + game.zoom * (j + game.figure.x) + 1,
                                      game.y + game.zoom * (i + game.figure.y) + 1,
                                      game.zoom - 2, game.zoom - 2)

doc.addEventListener("keydown", key_down)
doc.addEventListener("keyup", key_up)
browser.timer.set_interval(do_game, fps)
</script>
<div id="brython_div"></div>
<p></p><h1>Week14-</h1>
<!-- 導入 Brython 的程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){brython();}
</script>
<p>test</p>
<script type="text/python3">
print("可執行 Brython")

# 這個程式用於 demo 綠色方塊沿著特定網格路徑行走
# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc
from browser import document as doc
# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中
from browser import html
# 用於定時執行特定函式
import browser.timer
# 導入亂數模組
from random import random, randint

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 600)
# 將 canvas 標註的 id 設為 "canvas"
canvas.id = "canvas"
# 將 document 中 id 為 "brython_div" 的標註 
# 設為與 brython_div 變數對應
brython_div = doc["brython_div"]
# 將 canvas 標註放入 brython_div 所在位置
# 頁面中原本就已經放入 <div id="brython_div"></div> 標註
brython_div <= canvas
# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應
canvas = doc["canvas"]
# 將 canvas 的 2d 繪圖 context 命名為 ctx
ctx = canvas.getContext("2d")


oldurl = "https://mde.tw/wcm2022_guide/downloads/w14/1a_stud_old.txt"
newurl = "https://mde.tw/wcm2022_guide/downloads/w14/1a_stud.txt"
# read old data
old_data = open(oldurl).read()
print(old_data)
# read new old_data
new_data = open(newurl).read()
print(new_data)
# put new_data into new_list by splited with \n
new_list = new_data.split("\n")
print(" check point 2")
#print(new_list)
# get rid of the last element of new_list
new_list = new_list[:-1]
#print(new_list)
# from old_data, split with \n and \t to get studnum, github and grpnum
# get rid of the first line of old_data which is data title

for i in old_data.split("\n")[1:]:
    studnum, github, grpnum = i.split("\t")
    if studnum in new_list:
        if github == "":
            github = studnum
        print(str(studnum) + "\t" + str(github) + "\t" + str(grpnum))

#標尾
</script>
<div id="brython_div"></div>
<p></p><h1>Week13-Brython設定</h1>
<!-- 導入 Brython 的程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){brython();}
</script>
<p>test</p>
<script type="text/python3">
print("可執行 Brython")

# 這個程式用於 demo 綠色方塊沿著特定網格路徑行走
# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc
from browser import document as doc
# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中
from browser import html
# 用於定時執行特定函式
import browser.timer
# 導入亂數模組
from random import random, randint

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 600)
# 將 canvas 標註的 id 設為 "canvas"
canvas.id = "canvas"
# 將 document 中 id 為 "brython_div" 的標註 
# 設為與 brython_div 變數對應
brython_div = doc["brython_div"]
# 將 canvas 標註放入 brython_div 所在位置
# 頁面中原本就已經放入 <div id="brython_div"></div> 標註
brython_div <= canvas
# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應
canvas = doc["canvas"]
# 將 canvas 的 2d 繪圖 context 命名為 ctx
ctx = canvas.getContext("2d")

# 建立一個 dRect() 函式
# s default 為 1, c defaul 為紅色
def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath();
    ctx.rect(lux, luy, w, h)
    ctx.stroke();
    
# 建立畫直線函式
def draw_line(x1, y1, x2, y2, color="#ff0000"):
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.stroke()

# 建立 write Text 函式
def wText(x, y, t, s=14, c='#0000ff'):
    ctx.font = str(s) + "px Arial";
    ctx.fillText(t, x, y)

# 定義畫格線的函式
def grid(startx, starty, w, h, wnum, hnum, pixel=1, color="#ff0000"):
    # 利用迴圈與座標增量繪圖
    # 因為輸入 wnum 與 hnum 為格子數, 畫格線數則需加上 1
    for i in range(wnum+1):
        for j in range(hnum+1):
            # 畫上下直線
            yend = starty + h*(hnum)
            xend = startx + w*(wnum)
            x = startx + i*w
            draw_line(x, starty, x, yend, color)
            # 畫左右直線
            y = starty + j*h
            draw_line(startx, y, xend, y, color)
            #wText(w/2-10, y-w/2, str(j))

# 從兩個座標點求中心點座標
def center(lx, ly, rx, ry):
    # lx is x coord of the left up corner
    # rx is the x coord of th right down corner
    x = (lx + rx)/2
    y = (ly + ry)/2
    return x, y
    
# 畫出填色方塊
def draw_rect(gx, gy, gw, gh, color="lime"):
    # gx is the grid coord at x direction
    # gy is the grid coord at y direction
    # gw is the with of the green rect
    # gh is the height of the green rect
    lx = origx + (gx-1)*w
    ly = origy + (gy-1)*h
    rx = origx + gx*w
    ry = origy + gy*h
    cx, cy = center(lx, ly, rx, ry)
    # glx is the x coord of the left corner
    # gly is the y coord of the left corner
    glx = cx - gw/2
    gly = cy - gh/2
    # 利用設定的顏色值畫出 rectangle
    ctx.fillStyle = color
    ctx.fillRect(glx, gly, gw, gh)

# 以白色覆蓋位於 (nowx, nowy) 
# 且比目標方塊長寬各大於 1 pixel的方塊
def wipe():
    draw_rect(nowx, nowy, 30+1, 30+1, color="white")

# 畫出位於 (nowx, nowy) 的綠色方塊
def draw():
    draw_rect(nowx, nowy, 30, 30, color="lime")

# 繞著外圍行走
def walk():
    global stepx, stepy
    # 向下
    if nowy < hnum and nowx == 1:
        stepx = 0
        stepy = 1
    # 向右
    elif nowx < wnum and nowy == hnum:
        stepx = 1
        stepy = 0
    # 向上
    elif nowy == hnum and nowx == wnum:
        stepx = 0
        stepy = -1
    # 向左
    elif nowx == wnum and nowy == 1:
        stepx = -1
        stepy = 0
        
# 每隔短暫時間即呼叫執行一次的函式
def game():
    # 因 nowx 與 nowy 在函式外宣告
    # 且在函式內改變對應值, 因此需宣告為 global
    global nowx, nowy
    walk()
    wipe()
    nowx += stepx
    nowy += stepy
    draw()

# 綠色方塊起點座標與 x 及 y 方向的座標增量
nowx = 1
nowy = 1
stepx = 0
stepy = 0
# 設定格數
# width 方向格子數
wnum = 15
# height 方向格子數
hnum = 15
# 設定線寬
pixel = 1
# 設定 w 寬度
w = int(canvas.width/wnum) - pixel
# 設定 h 高度
h = int(canvas.height/hnum) - pixel
# 設定繪圖座標點起點位置
origx = 1
origy = 1
# 利用 grid 函式畫出格線
grid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")

'''
# 利用 draw_rect 以 grid 座標畫出正方形, 內建為 lime
draw_rect(3, 3, 30, 30)

# 利用隨機亂數產生五個紅色方塊
# wnum 與 hnum 為 x 與 y 方向的格子個數
# w 與 h 方向上的方塊 pixel 數
wrect_size = 30
hrect_size = 30
# 利用 for 迴圈產生五個紅色方塊
for i in range(5):
    xcoord = randint(1, wnum)
    ycoord = randint(1, hnum)
    draw_rect(xcoord, ycoord, wrect_size, hrect_size, color="red")
'''
browser.timer.set_interval(game, 100)
</script>
<div id="brython_div"></div>
<p></p>
<h1>Midterm</h1>
<p><!--配合 Wink 檔案將 js 檔案設定如下--></p>
<script>
var winkVideoData = { dataVersion: 1, frameRate: 10, buttonFrameLength: 5, buttonFrameOffset: 2, frameStops: { }, };
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/ssh_wink/w8_project.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<h1>ipv6 連線設定</h1>
<p>為了因應實體ip不足的情況，以及外部連線攻擊，導致網路癱瘓，</p>
<p>老師從ip數不足的ipv4改成新式虛擬ip充足的ipv6進行連線，</p>
<p>因為ipv6有六個區段，外部連接的駭客要成功入侵，需要大量嘗試，較不易破解。</p>
<p>操作影片：<a href="https://youtu.be/NwKKqGKRRao">https://youtu.be/NwKKqGKRRao</a></p>
<p>操作程序：</p>
<p>1.左下windows開始按鈕</p>
<p><img alt="" height="222" src="/images/未命名.jpg" width="332"/></p>
<p>2.設定齒輪</p>
<p><img alt="" height="295" src="/images/1aa.jpg" width="372"/></p>
<p>3.網路和網際網路</p>
<p><img alt="" height="131" src="/images/1bb.jpg" width="307"/></p>
<p>4.乙太網路</p>
<p><img alt="" height="89" src="/images/1cc.jpg" width="337"/></p>
<p>5.變更介面卡選項</p>
<p><img alt="" height="82" src="/images/1dd.jpg" width="170"/></p>
<p>6.快速點擊兩次乙太網路</p>
<p><img alt="" height="97" src="/images/1ee.jpg" width="278"/></p>
<p>7.乙太網路內容</p>
<p><img alt="" height="575" src="/images/1ff.jpg" width="523"/></p>
<p>8.取消勾選ipv4，防止外部連線攻擊</p>
<p><img alt="" height="587" src="/images/8.png" width="444"/></p>
<p>9.勾選ipv6切換為虛擬ip</p>
<p><img alt="" height="632" src="/images/1hh.jpg" width="495"/></p>
<p>10.ipv6內容</p>
<p><img alt="" height="628" src="/images/1jj.jpg" width="490"/></p>
<p>11.開啟dns代理主機選項</p>
<p><img alt="" height="663" src="/images/1kk.jpg" width="753"/></p>
<p>12.定位代理主機位置，系上的主機號碼為：「2001:b000:168::1」</p>
<p><img alt="" height="657" src="/images/1ll.jpg" width="725"/></p>
<p>13.Proxy</p>
<p><img alt="" height="67" src="/images/1nn.jpg" width="218"/></p>
<p>14.開啟Proxy設定</p>
<p><img alt="" height="497" src="/images/1oo.jpg" width="536"/></p>
<p>15.設定代理主機位置，系上號碼為：「2001:288:6004:17::42」</p>
<p><img alt="" height="484" src="/images/1pp.jpg" width="543"/></p>
<p>16.設定連接埠。埠號為：「3128」</p>
<p><img alt="" height="497" src="/images/1qq.jpg" width="508"/></p>
<p></p>
<h1>ShareX 狀況排除</h1>
<p>在初次使用ShareX時常會遇到的狀況</p>
<p></p>
<p>操作影片：<a href="https://youtu.be/vEEoHVLOmt0">https://youtu.be/vEEoHVLOmt0</a></p>
<p><a href="https://youtu.be/NwKKqGKRRao"></a>操作程序</p>
<p><img alt="" height="1080" src="/images/0PuySxG3Eb.png" width="1920"/></p>
<p>這是由於ShareX的錄影將一格一格的影格串連起來是透過開源的ffmpeg，</p>
<p>使用前必須先有ffmpeg的檔案ShareX才能進行呼叫，</p>
<p>ffmpeg的檔案可以下載，也可以從學校電腦的c槽進行複製，</p>
<p>擁有檔案後在給定ffmpeg的路徑，方可使用ShareX。</p>
<p>操作影片：<a href="https://www.youtube.com/watch?v=vEEoHVLOmt0">https://www.youtube.com/watch?v=vEEoHVLOmt0</a></p>
<p>1.Task setting<img alt="" height="715" src="/images/1A.png" width="1191"/></p>
<p>2.Screen recorder</p>
<p><img alt="" height="639" src="/images/1B.png" width="881"/></p>
<p>3.<span>Screen recorder options</span></p>
<p><span><img alt="" height="609" src="/images/1C.png" width="897"/></span></p>
<p><span>4. ...</span></p>
<p><span><img alt="" height="668" src="/images/1D.png" width="895"/></span></p>
<p><span>5.找到自己放置的ffmpeg檔案位置，並選取ffmpeg檔案，接著按開啟，這樣就完成設定了</span></p>
<p><span><img alt="" height="661" src="/images/1E.png" width="1137"/></span></p>
<h1>Putty &amp; SSH &amp; Key設定</h1>
<p>為了方便執行Add，Commit，Push，這邊要開始進行Putty設定，用SSH設定近端與Github帳號間的連線，也就是所謂的Key，這樣一來，設定完成後就能省去每次A.C.P都要輸入電子郵件跟密碼的麻煩。</p>
<p>操作影片：<a href="https://youtu.be/COpwcMVqg_w">https://youtu.be/COpwcMVqg_w</a></p>
<p><a href="https://youtu.be/NwKKqGKRRao"></a>操作程序。</p>
<p>1.打開Puttygen程式</p>
<p><img alt="" height="476" src="/images/1.png" width="1109"/></p>
<p>2.點選Generate</p>
<p><img alt="" height="511" src="/images/2.png" width="660"/></p>
<p>3.在空白區域滑動滑鼠，因為Key的亂碼是靠滑鼠在此區域裡移動來進行亂數產生的。</p>
<p><img alt="" height="529" src="/images/3.png" width="633"/></p>
<p>4.複製生成的Key碼<img alt="" height="490" src="/images/4.png" width="606"/></p>
<p>5.點選Save private key的按鈕生成ppk檔</p>
<p><img alt="" height="482" src="/images/5.png" width="618"/></p>
<p>6.點選確定</p>
<p><img alt="" height="466" src="/images/6.png" width="590"/></p>
<p>7.輸入存檔名稱</p>
<p><img alt="" height="619" src="/images/7.png" width="993"/></p>
<p>8.到Github官網，展開右上角帳號的下拉式個人選單，點選Settings</p>
<p><img alt="" height="1002" src="/images/8+.png" width="1920"/></p>
<p>9.點選左側列表的SSH and GPG keys選項 <img alt="" height="1042" src="/images/9.png" width="1920"/></p>
<p>10.點選New SSH key按鈕在自己的Github帳號上生成鑰匙</p>
<p><img alt="" height="1042" src="/images/10.png" width="1920"/></p>
<p>11.貼上剛剛在Puttygen程式裡生成的Key碼，讓Github帳號的鑰匙跟可攜的鑰匙配對，輸入鑰匙名稱最後案Add SSH key按鈕<br/><img alt="" height="1042" src="/images/11.png" width="1920"/></p>
<p>12.點選Putty.exe程式<img alt="" height="472" src="/images/12.png" width="1026"/></p>
<p>13.在Session頁面底下的「Host Name(or IP address)」欄位輸入要連接的網頁，</p>
<p>「Saved Sessions」底下的空白欄位命名，按「Save」按鈕，</p>
<p><img alt="" height="441" src="/images/13.png" width="447"/></p>
<p>14.點選左側列表的「Proxy」頁面，</p>
<p>在「Host Name(or IP address)」欄位輸入學校的proxy碼[2001:288:6004:17::42] 、</p>
<p>在「Prot」欄位輸入埠號3128，接著在「Proxy type」欄位勾選「HTTP」選項。</p>
<p><img alt="" height="461" src="/images/14.png" width="481"/></p>
<p><img alt="" height="444" src="/images/15.png" width="450"/></p>
<p>15.<span>點選左側列表「SSH」項目旁的「+」按鈕將其展開，點選底下的「Auth」頁面，按「Browse」按鈕選擇剛剛生成的ppk檔。</span></p>
<p><span><img alt="" height="455" src="/images/16.png" width="463"/></span></p>
<p><span><img alt="" height="444" src="/images/17.png" width="459"/></span></p>
<p><span><img alt="" height="567" src="/images/18.png" width="943"/></span></p>
<p><span><img alt="" height="447" src="/images/19.png" width="453"/></span></p>
<p><span>16.進入可攜系統的黑窗命令列輸入指令「regedit」</span></p>
<p><span><img alt="" height="539" src="/images/20.png" width="970"/></span></p>
<p><span>17.點選左側列表「HKEY_CURRENT_USER」資料夾旁邊的展開按鈕，</span></p>
<p><span>點選左側列表「SOFTWARE」資料夾旁邊的展開按鈕，</span></p>
<p><span>對底下「SimonTatham」按右鍵「匯出(E)」，</span></p>
<p>為匯出檔案命名，存檔，最後點選剛剛匯出的reg檔案，即完成設定。</p>
<p><span><img alt="" height="743" src="/images/21.png" width="1231"/></span></p>
<p><span><img alt="" height="747" src="/images/22.png" width="1235"/></span></p>
<p><span><img caption="false" height="730" src="/images/23.png" width="1220"/></span></p>
<p><img alt="" height="502" src="/images/24.png" width="559"/></p>
<p><span><img alt="" height="483" src="/images/25.png" width="1087"/></span></p>
<h1>nginx 設定</h1>
<p>操作影片：<a href="https://youtu.be/LSE6rWOk46g">https://youtu.be/LSE6rWOk46g</a></p>
<p><a href="https://youtu.be/COpwcMVqg_w"></a><a href="https://youtu.be/NwKKqGKRRao"></a>操作程序。</p>
<p>1.在黑窗中輸入指令「Pythin -m http.server」</p>
<p><img alt="" height="564" src="/images/1.jpg" width="1045"/></p>
<p><img alt="" height="553" src="/images/2.jpg" width="1011"/></p>
<p></p>
<p>2.到老師的校用檔案下載區下載「nginx-1.20.2.zip」程式</p>
<p><img alt="" height="1060" src="/images/3.jpg" width="816"/></p>
<p></p>
<p>3.將<span>「nginx-1.20.2.zip」</span>放至可攜裝置內解壓縮</p>
<p><img alt="" height="715" src="/images/4.jpg" width="1371"/></p>
<p><img alt="" height="805" src="/images/5.jpg" width="1171"/></p>
<p></p>
<p>4.進入<span>「nginx-1.20.2」資料夾</span></p>
<p><img alt="" height="599" src="/images/6.jpg" width="1217"/></p>
<p></p>
<p>5.<span>進入</span><span>「conf」資料夾</span></p>
<p><img alt="" height="417" src="/images/7.jpg" width="1138"/></p>
<p></p>
<p>6.將<span>「nginx.conf」檔案拖入SciTE編輯器中</span></p>
<p><img alt="" height="885" src="/images/8.jpg" width="1338"/></p>
<p><img alt="" height="1125" src="/images/9.jpg" width="1694"/></p>
<p><img alt="" height="801" src="/images/10.jpg" width="1288"/></p>
<p></p>
<p>7.找到程式中有一列內容為「server{」的程式列，在<span>「server{」</span>底下的「listen      80;」底下加入一行新程式碼「listen     [::]:80;」。</p>
<p><img alt="" height="1125" src="/images/11.jpg" width="884"/></p>
<p><img alt="" height="777" src="/images/12.jpg" width="607"/></p>
<p></p>
<p>8.確認在剛剛新加的<span>程式碼「listen     [::]:80;」的下一行程式碼為「server_name localhost」，</span></p>
<p>server_name後面必須得為localhost。</p>
<p><img alt="" height="751" src="/images/0.jpg" width="588"/></p>
<p></p>
<p>9.存檔</p>
<p><img alt="" height="821" src="/images/13.jpg" width="748"/></p>
<p></p>
<p>10.開啟「nginx.exe」程式</p>
<p><img alt="" height="611" src="/images/14.jpg" width="1193"/></p>
<p></p>
<p>11.將「公用網路，例如機場和咖啡廳網路(這些網路的安全性通常比較低或沒有任何安全性，因此不建議使用)(U)」選項打勾，之後按允許存取。</p>
<p><img alt="" height="715" src="/images/15.jpg" width="1171"/></p>
<p></p>
<p>12.進入「本機磁碟(C:)」底下的「2021_cadlab_portable」資料夾</p>
<p><img alt="" height="741" src="/images/16.jpg" width="1241"/></p>
<p></p>
<p>13.進入「data」資料夾，將「ProcessExplorer」複製到可攜裝置中</p>
<p><img alt="" height="580" src="/images/17.jpg" width="1176"/></p>
<p><img alt="" height="949" src="/images/18.jpg" width="1152"/></p>
<p><img alt="" height="962" src="/images/19.jpg" width="1480"/></p>
<p></p>
<p>14.進入「ProcessExplorer」資料夾，開啟「procexp64.exe」程式，確認剛剛執行的<span>「nginx.exe」程式是否有確實執行。</span></p>
<p><img alt="" height="949" src="/images/20.jpg" width="1215"/></p>
<p><img alt="" height="388" src="/images/21.jpg" width="1150"/></p>
<p><img alt="" height="625" src="/images/22.jpg" width="830"/></p>
<p></p>
<p>15.確認Proxy設定，</p>
<p>在「不要為開頭為下列項目的位址使用Proxy伺服器。請使用分號(;)來分隔每個項目。」底下欄位輸入localhost，</p>
<p>否則在網頁上執行的時候，系統會用Proxy代理主機的localhost而非你當前裝置的localhost執行。</p>
<p><img alt="" height="996" src="/images/23.jpg" width="966"/></p>
<p></p>
<p>16.在網址列輸入localhost，當出現下列畫面時即代表設定成功</p>
<p><img alt="" height="106" src="/images/24.jpg" width="814"/></p>
<p><img alt="" height="1080" src="/images/25.jpg" width="1920"/></p>